name: GOdbc build and release

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  release:
    types: [published]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            container: null
            c_compiler: cl
            cpp_compiler: cl
            build_type: Release
            artifact_name: windows-msvc
          - os: ubuntu-latest
            container: null
            c_compiler: gcc
            cpp_compiler: g++
            build_type: Release
            artifact_name: linux-gcc
          - os: ubuntu-latest
            container: null
            c_compiler: clang
            cpp_compiler: clang++
            build_type: Release
            artifact_name: linux-clang
          - os: ubuntu-latest
            container: centos:7
            c_compiler: gcc
            cpp_compiler: g++
            build_type: Release
            artifact_name: rhel7-gcc

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies (RHEL 7)
        if: matrix.container == 'centos:7'
        run: |
          yum update -y
          yum groupinstall -y "Development Tools"
          yum install -y cmake3
          yum install -y golang
          ln -s /usr/bin/cmake3 /usr/bin/cmake

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Configure CMake
        run: |
          cmake -B ${{ steps.strings.outputs.build-output-dir }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
            -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -S ${{ github.workspace }}

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: ctest --build-config ${{ matrix.build_type }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}-${{ matrix.build_type }}
          path: ${{ steps.strings.outputs.build-output-dir }}/bin/
          retention-days: 7

  create-release:
    needs: [build]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: *-Release

      - name: Create release archive
        run: |
          cd artifacts
          for dir in */; do
            dir=${dir%/}
            tar -czf "../${dir}.tar.gz" -C "$dir" .
          done

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            *.tar.gz
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}