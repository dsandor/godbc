# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  release:
    types: [published]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest, ubuntu-latest]
        container: [null, null, centos:7]
        build_type: [Release]
        c_compiler: [gcc, clang, cl, gcc]
        cpp_compiler: [g++, clang++, cl, g++]
        artifact_name: [linux-gcc, linux-clang, windows-msvc, rhel7-gcc]
        include:
          - os: windows-latest
            container: null
            c_compiler: cl
            cpp_compiler: cl
            artifact_name: windows-msvc
          - os: ubuntu-latest
            container: null
            c_compiler: gcc
            cpp_compiler: g++
            artifact_name: linux-gcc
          - os: ubuntu-latest
            container: null
            c_compiler: clang
            cpp_compiler: clang++
            artifact_name: linux-clang
          - os: ubuntu-latest
            container: centos:7
            c_compiler: gcc
            cpp_compiler: g++
            artifact_name: rhel7-gcc
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: ubuntu-latest
            container: null
            c_compiler: gcc
            artifact_name: rhel7-gcc

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies (RHEL 7)
      if: matrix.container == 'centos:7'
      run: |
        yum update -y
        yum groupinstall -y "Development Tools"
        yum install -y cmake3
        yum install -y golang
        ln -s /usr/bin/cmake3 /usr/bin/cmake

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}-${{ matrix.build_type }}
        path: ${{ steps.strings.outputs.build-output-dir }}/bin/
        retention-days: 7

  create-release:
    needs: [build]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        pattern: *-Release

    - name: Create release archive
      run: |
        cd artifacts
        for dir in */; do
          dir=${dir%/}
          tar -czf "../${dir}.tar.gz" -C "$dir" .
        done

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          *.tar.gz
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
